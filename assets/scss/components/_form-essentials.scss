/**
 * in this section essentials for form types are defined
 * as placeholders. These are defined by variables + extended
 * in every state/position wich needs this styling
 */

/**
 * Remove X action from chrome + firefox + ms styles
 */
/* clears the 'X' from Internet Explorer */
input[type=search]::-ms-clear {  display: none; width : 0; height: 0; }
input[type=search]::-ms-reveal {  display: none; width : 0; height: 0; }

/* clears the 'X' from Chrome */
input[type="search"]::-webkit-search-decoration,
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-results-button,
input[type="search"]::-webkit-search-results-decoration { display: none; }

/**
 * Define input clear button, by default / globally
 */
%input-clear {
  position: absolute;
  top: 50%;
  right: $input-padding-y;
  display: none;

  margin-top: -($font-size-lg / 2);

  width: $font-size-lg;
  height: $font-size-lg;

  background-color: $input-bg;

  cursor: pointer;
  color: $body-color;
  transition: color .3s;

  &:hover {
    color: $primary;
  }

  z-index: 5;
}

/**
 * Custom input group, used ie. for string search
 * ----------------------------------------------
 * its using variables from inputs + input groups
 */
%custom-input-group {
  position: relative;

  .form-control {
    @include border-radius($input-border-radius);

    // -- make padding right based of append square
    padding-right: ( $input-font-size * $input-line-height ) + ( $input-padding-y * 2 );
  }

  .input-group-append {
    line-height: 0;
    position: absolute;
    top: 0;
    right:0;

    // -- z-index to prevent bugs on focus/hover
    z-index: 4;

    button.input-group-btn {
      @include button-reset();

      line-height: 0;
      color: $body-color-light;

      transition: color .3s;

      height: ( $input-font-size * $input-line-height ) + ( $input-padding-y * 2 );
      width: ( $input-font-size * $input-line-height ) + ( $input-padding-y * 2 );

      svg {
        width: $font-size-lg;
        height: $font-size-lg;
      }

      &:hover, &:focus, &:active {
        color: $primary;
      }
    }
  }
}

/**
 * Custom checkbox , with second level
 */
%custom-checkbox {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  padding-left: 0;

  gap: $custom-checkbox-gutter;

  // clickable element!
  cursor: pointer;

  // hide input by default
  input[type='checkbox'] {
    display: none;
  }

  // label
  > label {
    flex: 1;
  }

  // custom input
  > span {
    display: block;

    width: 100%;
    height: $custom-checkbox-input-size;
    max-width: $custom-checkbox-input-size;
    flex: 0 0 $custom-checkbox-input-size;

    position: relative;

    line-height: 0;

    border-radius: $custom-checkbox-input-border-radius;
    background-color: $custom-checkbox-input-bg;

    // offset top to make it center with first line
    // little calculation based on font size base and lineheight
    top: ( ( ($font-size-base * $line-height-base) - $font-size-base ) / 2 );

    @if ( $custom-checkbox-input-border-width != 0 ) {
      border: $custom-checkbox-input-border-width solid $custom-checkbox-input-border-color;
    }

    transition: background-color .3s, border-color .3s;

    svg {
      width: $custom-checkbox-input-icon-size;
      height: $custom-checkbox-input-icon-size;
      display: none;
      transition: color .3s;
      color: $custom-checkbox-input-icon-color;

      position: absolute;
      top: 50%;
      left: 50%;

      transform: translate(-($custom-checkbox-input-icon-size/2), -($custom-checkbox-input-icon-size/2));
    }
  }

  // hover
  &:hover {
    > span {

      background-color: $custom-checkbox-input-hover-bg;

      @if ( $custom-checkbox-input-border-width != 0 ) {
        border: $custom-checkbox-input-border-width solid $custom-checkbox-input-hover-border-color;
      }

      svg {
        display: none;
        color: $custom-checkbox-input-hover-icon-color;
      }
    }
  }

  // active
  input:checked + span {
    background-color: $custom-checkbox-input-active-bg;

    @if ( $custom-checkbox-input-border-width != 0 ) {
      border: $custom-checkbox-input-border-width solid $custom-checkbox-input-active-border-color;
    }

    svg {
      display: block;
      color: $custom-checkbox-input-active-icon-color;
    }
  }

  // additional if second level exists. toggle button

  &.has-second-level {
    // uses definitions of input check. to make it even in styling / sizes
    button.toggle-second-level {
      @include button-reset();

      width: 100%;
      height: $custom-checkbox-input-size;
      max-width: $custom-checkbox-input-size;
      flex: 0 0 $custom-checkbox-input-size;

      position: relative;

      // offset top to make it center with first line
      // little calculation based on font size base and lineheight
      top: ( ( ($font-size-base * $line-height-base) - $font-size-base ) / 2 );

      svg {
        width: $custom-checkbox-input-icon-size;
        height: $custom-checkbox-input-icon-size;

        position: absolute;
        top: 50%;
        left: 50%;

        transition: transform .3s;
        transform: translate(-($custom-checkbox-input-icon-size/2), -($custom-checkbox-input-icon-size/2));
      }
    }

    // -- hide by default
    .list-filter-second-level {
      display: none;
    }

    // -- show if open state
    //    and icon state if opened
    &.is--open {

      button.toggle-second-level {
        svg {
          transform: translate(-($custom-checkbox-input-icon-size/2), -($custom-checkbox-input-icon-size/2)) scaleY(-1);
        }
      }

      .list-filter-second-level {
        display: block;
      }
    }
  }

  // second level definition
  .list-filter-second-level {
    flex: 0 0 100%;
    width: 100%;
    max-width: 100%;

    margin-top: ( $custom-checkbox-spacer - $custom-checkbox-gutter );

    // padding left, icon input size + gutter
    padding-left: ( $custom-checkbox-input-size + $custom-checkbox-gutter );
  }
}