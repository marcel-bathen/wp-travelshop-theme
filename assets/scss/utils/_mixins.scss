/**
 * Mixin to generate font sizes with scss maps
 * this can be used with px values + bootstrap breakpoints.
 * =============================================================
 * Given variables
 * -------------------------------------------------------------
 * $font-size-map: scss map with font sizes, key can be px value or bootstrap breakpoint ( see $grid-breakpoints for keys )
 * $breakpoints: $grid-breakpoints defined by bootstrap. Can be overwritten by custom breakpoint scss map
 * =============================================================
 * Usage
 * -------------------------------------------------------------
 * For example h1
 * h1, .h1 { @include font-size-generator($h1-font-sizes);
 * You can also use it for different views like travelboxes or something else.
 *
 * To use it you need to setup a scss map:
 * $travel-box-headlines: (
 *  null: 1rem, ( default value, from 0 - infinity )
 *  lg: 2rem ( 32px if screen > lg breakpoint )
 * );
 *
 * Use sizes on element:
 * .travel-box h1.travel-box--title { @include font-size-generator($travel-box-headlines); }
 *
 * Enjoy responsive font sizes! ;)
 */
@mixin font-size-generator($font-size-map, $breakpoints: $grid-breakpoints) {
  // loop through set font sizes
  @each $breakpoint, $font-size in $font-size-map {
    // check if breakpoint defined as zero to render "default" value ( mobile )
    @if $breakpoint == null {
      font-size: $font-size;
    }
    @else {
      // if not null use $breakpoint as breakpoint to set font size

      // check if breakpoint with key is defined + set $breakpoint by $grid-breakpoints
      @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint: map-get($breakpoints, $breakpoint);
      }

      // set media query + font size for view.
      @media ( min-width: $breakpoint ) {
        font-size: $font-size;
      }
    }
  }
}

/**
 * Used for custom breakpoint / bootstrap breakpoint to use for various of elements to break them into another layout
 */

@mixin get-custom-breakpoint($breakpoint, $breakpoints: $grid-breakpoints) {
  @if $breakpoint == null {
    @content;
  }
  @else {
    @if map-has-key($breakpoints, $breakpoint) {
      $breakpoint: map-get($breakpoints, $breakpoint);
    }

    @media ( min-width: $breakpoint ) {
      @content;
    }
  }
}