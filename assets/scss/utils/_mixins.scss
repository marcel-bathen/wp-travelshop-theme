/**
 * Mixin to generate font sizes with scss maps
 * this can be used with px values + bootstrap breakpoints.
 * =============================================================
 * Given variables
 * -------------------------------------------------------------
 * $font-size-map: scss map with font sizes, key can be px value or bootstrap breakpoint ( see $grid-breakpoints for keys )
 * $breakpoints: $grid-breakpoints defined by bootstrap. Can be overwritten by custom breakpoint scss map
 * =============================================================
 * Usage
 * -------------------------------------------------------------
 * For example h1
 * h1, .h1 { @include font-size-generator($h1-font-sizes);
 * You can also use it for different views like travelboxes or something else.
 *
 * To use it you need to setup a scss map:
 * $travel-box-headlines: (
 *  null: 1rem, ( default value, from 0 - infinity )
 *  lg: 2rem ( 32px if screen > lg breakpoint )
 * );
 *
 * Use sizes on element:
 * .travel-box h1.travel-box--title { @include font-size-generator($travel-box-headlines); }
 *
 * Enjoy responsive font sizes! ;)
 */
@mixin font-size-generator($font-size-map, $breakpoints: $grid-breakpoints) {
  // loop through set font sizes
  @each $breakpoint, $font-size in $font-size-map {
    // check if breakpoint defined as zero to render "default" value ( mobile )
    @if $breakpoint == null {
      font-size: $font-size;
    }
    @else {
      // if not null use $breakpoint as breakpoint to set font size

      // check if breakpoint with key is defined + set $breakpoint by $grid-breakpoints
      @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint: map-get($breakpoints, $breakpoint);
      }

      // set media query + font size for view.
      @media ( min-width: $breakpoint ) {
        font-size: $font-size;
      }
    }
  }
}

/**
 * Used for custom breakpoint / bootstrap breakpoint to use for various of elements to break them into another layout
 */

@mixin get-custom-breakpoint($breakpoint, $breakpoints: $grid-breakpoints) {
  @if $breakpoint == null {
    @content;
  }
  @else {
    @if map-has-key($breakpoints, $breakpoint) {
      $breakpoint: map-get($breakpoints, $breakpoint);
    }

    @media ( min-width: $breakpoint ) {
      @content;
    }
  }
}


/**
 * Mixins for discounts - we need this cuz we using it in varius breakpoints with different styles. + we need to reset bg-colors of discount inner from time to time for some elemnets
 */
// -- set discount border bg for inner element, to make border not shine through.
@mixin discount-border-set-bg($bg: $card-bg) {
  .discount-wrapper--inner {
    background-color: $bg;
  }
}

// -- discount border style. in normal usage just use @extend %discount-border; to not produce more css as we need. This just for usage in breakpoints.
@mixin discount-border {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;

  // -- set border on position 50% top in background
  hr {
    display: block; // its display none by default
    position: absolute;
    margin:0;

    top: 50%;
    left: 0;
    right:0;
  }

  .discount-wrapper--inner {
    padding-left: .25rem;
    padding-right: .25rem;

    position: relative;
    z-index: 2; // set it on top of background border..
  }

  // -- using mixin for this part cuz background color of various elements can be different. To avoid bugs we redefine it in various elements by variables of them.
  @include discount-border-set-bg($card-bg);
}

/**
 * Generates fadeout text based on font size, line-height and lines to show
 * last line is faded out!
 */
@mixin fade-out-text($font-size: $font-size-base, $line-height: $line-height-base, $lines: 3, $background: #fff) {
  $calculatedHeight: ( $font-size * $line-height ) * $lines;
  $calculateFadeoutPercentage: calc(100% / $lines);

  position: relative;

  max-height: $calculatedHeight;
  overflow: hidden;

  // -- setting up fadeout effect based on background + calculated heighs + lines ( last line will be faded out )
  &:after {
    content: '';
    display: block;

    pointer-events: none;

    position: absolute;
    z-index: 2;

    top:0;
    left:0;
    right:0;

    width: 100%;
    height: $calculatedHeight;

    @include gradient-y(green, red, 0, $calculateFadeoutPercentage);
  }
}